Description
自从明明学了树的结构,就对奇怪的树产生了兴趣…… 给出标号为1到N的点,以及某些点最终的度数,允许在任意两点间连线,可产生多少棵度数满足要求的树?
Input
第一行为N(0 < N < = 1000),接下来N行,第i+1行给出第i个节点的度数Di,如果对度数不要求,则输入-1
Output
一个整数,表示不同的满足要求的树的个数,无解输出0
Sample Input
3
1
-1
-1
Sample Output
2
HINT
两棵树分别为1-2-3;1-3-2

基本思路：
prufer编码
定义：
prufer是无根树的一种数列
树的prufer编码：
不断删除树中度数为1且序号最小的节点，输出与该节点相连的节点，直到树中只剩两个节点
prufer编码性质：
一个n个结点的树可以转为唯一一个n-2的prufer序列，一个n-2的prufer序列也只能转为唯一一棵无根树
度数为m的结点在prufer序列中出现的次数为m-1次
prufer编码还原为树：
从prufer编码的最前端开始扫描，设扫描到的结点设为u，
找到不在prufer序列中且未被标记的序号最小的结点，设为v，
连接u，v，标记v，讲u从prufer中删除，继续扫描

基本思路：
根据prufer编码的性质，题目转化为求相应的prufer编码的数量
n为树的结点,d[]为各节点的度数，m为无限制度数的节点数
设tot=Σ(n,i=1)(d[i]-1)
则在n-2大小的数组中放入tot个序号，共有C(tot,n-2)种插法
在tot个号的排列中，放入第一个节点的方法有C(d1-1,tot)
放入第二个节点的方法共有C（d2-1,tot)个方法
......
另外还有m个无度数限制，所以它们可任意排列在剩余的n-2-tot个位置
根据乘法原理
ans=(n-2)!*m^(n-2-tot)/((n-2-tot)!*(d1-1)!*...*(dn-1)!)
然后就要高精度...但是高精度太麻烦，显而易见，排列组合的结果是整数，
所以就要给n！分解质因数，两种方法，一种暴力，另一种这里详细的介绍一下：
若p为质数，则n！可以分解为一个数*p^x,其中
x=[n/p]+[n/p^2]+...+[n/p^t],且p^t<n
所以n!=p1^x1*p2^x2*...*pm^xm
拓展：
任意一个长度为n-2且序列中元素为1~n的序列都可以唯一的表示成一棵无根树
n个节点,度分别为d1,d2,d3...dn的无根树共有：
(n-2)!/((d1-1)!*(d2-1)!*...*(dn-1)!)个
由一一对应的性质我们可以退出Caylley公式：
一个完全图Kn有n^(n-2)棵生成树
证明：
由于长度为n-2的序列每一个位置都可以放1~n中的任意一个元素，
所以总的方案数显然是n-2个n相乘，即n^(n-2)


代码如下：
#include<iostream>
#include<cstdio>
#include<cmath>
#include<cstring>
#define mod 1000000
#define ll long long 
using namespace std;
inline int read()
{
    int x=0,f=1;char ch=getchar();
    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}
    while(ch>='0'&&ch<='9'){x*=10;x+=ch-'0';ch=getchar();}
    return x*f;
}
int n,m,tot,cnt;
int d[1005],num[1005],pri[1005];
int ans[1005],l=1;
inline bool jud(int x)
{
     for(int i=2;i<=sqrt(x);i++)
         if(x%i==0)return 0;
     return 1;
}
void getpri()
{
     for(int i=2;i<=1000;i++)
         if(jud(i))pri[++cnt]=i;
}
void solve(int a,int f)
{
	 for(int k=1;k<=a;k++)
	 {
	 	 int x=k;
         for(int i=1;i<=cnt;i++)
         {
             if(x<=1)break;
             while(x%pri[i]==0)
             {num[i]+=f;x/=pri[i];}
         }
	 }
}
void mul(int x)
{
	for(int i=1;i<=l;i++)
	    ans[i]*=x;
	for(int i=1;i<=l;i++)
	{
	    ans[i+1]+=ans[i]/mod;
	    ans[i]%=mod;
    }
    while(ans[l+1]>0)
	{l++;ans[l+1]+=ans[l]/mod;ans[l]%=mod;}
}
void print()
{
	for(int i=l;i>0;i--)
	    if(i==l)printf("%d",ans[i]);
		else printf("%06d",ans[i]);
}
int main()
{
     getpri();ans[1]=1;
     n=read();
     if(n==1)
     {
         int x=read();
         if(!x)printf("1");
         else printf("0");
         return 0;
     }
     for(int i=1;i<=n;i++)
     {
         d[i]=read();
         if(!d[i]){printf("0");return 0;}
         if(d[i]==-1)m++;
		 else {d[i]--;tot+=d[i];}
     }
     if(tot>n-2){printf("0");return 0;}
     solve(n-2,1);
     solve(n-2-tot,-1);
     for(int i=1;i<=n;i++)
         if(d[i])solve(d[i],-1);
     for(int i=1;i<=cnt;i++)
         while(num[i]--)
             mul(pri[i]);
     for(int i=1;i<=n-2-tot;i++)
         mul(m);
     print();
     return 0;
}
