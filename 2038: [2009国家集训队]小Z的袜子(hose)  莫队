Description
作为一个生活散漫的人，小Z每天早上都要耗费很久从一堆五颜六色的袜子中找出一双来穿。终于有一天，小Z再也无法忍受这恼人的找袜子过程，于是他决定听天由命……
具体来说，小Z把这N只袜子从1到N编号，然后从编号L到R(L 尽管小Z并不在意两只袜子是不是完整的一双，甚至不在意两只袜子是否一左一右，他却很在意袜子的颜色，毕竟穿两只不同色的袜子会很尴尬。
你的任务便是告诉小Z，他有多大的概率抽到两只颜色相同的袜子。当然，小Z希望这个概率尽量高，所以他可能会询问多个(L,R)以方便自己选择。

Input
输入文件第一行包含两个正整数N和M。N为袜子的数量，M为小Z所提的询问的数量。
接下来一行包含N个正整数Ci，其中Ci表示第i只袜子的颜色，相同的颜色用相同的数字表示。
再接下来M行，每行两个正整数L，R表示一个询问。

Output
包含M行，对于每个询问在一行中输出分数A/B表示从该询问的区间[L,R]中随机抽出两只袜子颜色相同的概率。
若该概率为0则输出0/1，否则输出的A/B必须为最简分数。（详见样例）

Sample Input
6 4
1 2 3 3 3 2
2 6
1 3
3 5
1 6
Sample Output
2/5
0/1
1/1
4/15

「样例解释」
询问1：共C(5,2)=10种可能，其中抽出两个2有1种可能，抽出两个3有3种可能，概率为(1+3)/10=4/10=2/5。
询问2：共C(3,2)=3种可能，无法抽到颜色相同的袜子，概率为0/3=0/1。
询问3：共C(3,2)=3种可能，均为抽出两个3，概率为3/3=1/1。
注：上述C(a, b)表示组合数，组合数C(a, b)等价于在a个不同的物品中选取b个的选取方案数。
「数据规模和约定」
30%的数据中 N,M ≤ 5000；
60%的数据中 N,M ≤ 25000；
100%的数据中 N,M ≤ 50000，1 ≤ L < R ≤ N，Ci ≤ N。

题解
莫队算法
如果我们已知[l,r]的答案，能在O(1)时间得到[l+1,r]的答案以及[l,r-1]的答案，即可使用莫队算法。时间复杂度为O(n^1.5)。如果只能在logn的时间移动区间，则时间复杂度是O(n^1.5*log n)。
其实就是找一个数据结构支持插入、删除时维护当前答案。

这道题的话我们很容易用数组来实现，做到O(1)的从[l,r]转移到[l,r+1]与[l+1,r]。

那么莫队算法怎么做呢？以下都是在转移为O(1)的基础下讨论的时间复杂度。另外由于n与m同阶，就统一写n。
如果已知[l,r]的答案，要求[l’,r’]的答案，我们很容易通过|l – l’|+|r – r’|次转移内求得。
将n个数分成sqrt(n)块。
按区间排序，以左端点所在块内为第一关键字，右端点为第二关键字，进行排序，也就是以(pos [l]，r)排序
然后按这个排序直接暴力，复杂度分析是这样的：
1、i与i+1在同一块内，r单调递增，所以r是O(n)的。由于有n^0.5块,所以这一部分时间复杂度是n^1.5。
2、i与i+1跨越一块，r最多变化n，由于有n^0.5块，所以这一部分时间复杂度是n^1.5
3、i与i+1在同一块内时l变化不超过n^0.5，跨越一块也不会超过n^0.5，忽略*2。由于有m次询问（和n同级），所以时间复杂度是n^1.5
于是就是O(n^1.5)了

代码如下：
#include<bits/stdc++.h>

using namespace std;

typedef long long ll;
const int inf = 0x3f3f3f3f;
const int maxn = 100000+10;
const int mod = 1000000009;

int n,m,blk;
ll s[maxn],ans;
struct data{
    int l,r,id;
    ll a,b;
}a[maxn];
int pos[maxn],c[maxn];
bool cmp(data a,data b){
    if(pos[a.l]==pos[b.l]) return a.r<b.r;
    return a.l<b.l;
}
bool cmp_id(data a,data b){
    return a.id<b.id;
}
void init(){
    scanf("%d%d",&n,&m);
    for(int i=1;i<=n;i++){
        scanf("%d",&c[i]);
    }
    blk=int(sqrt(n));
    for(int i=1;i<=n;i++){
        pos[i]=(i-1)/blk+1;
    }
    for(int i=1;i<=m;i++){
        scanf("%d%d",&a[i].l,&a[i].r);
        a[i].id=i;
    }
}
ll sqr(ll x) {return x*x;}
ll gcd(ll a,ll b) {return b==0?a:gcd(b,a%b);}
void update(int p,int add){
    ans-=sqr(s[c[p]]);
    s[c[p]]+=add;
    ans+=sqr(s[c[p]]);
}
void solve(){
    int l=1,r=0;
    for(int i=1;i<=m;i++){
        for(;r<a[i].r;r++){
            update(r+1,1);
        }
        for(;r>a[i].r;r--){
            update(r,-1);
        }
        for(;l<a[i].l;l++){
            update(l,-1);
        }
        for(;l>a[i].l;l--){
            update(l-1,1);
        }
        if(a[i].l==a[i].r){
            a[i].a=0;a[i].b=1;
            continue;
        }
        a[i].a=ans-(a[i].r-a[i].l+1);
        a[i].b=(ll)(a[i].r-a[i].l+1)*(a[i].r-a[i].l);
        ll k=gcd(a[i].a,a[i].b);
        a[i].a/=k;a[i].b/=k;
    }
}
int main(){
    init();
    sort(a+1,a+m+1,cmp);
    solve();
    sort(a+1,a+m+1,cmp_id);
    for(int i=1;i<=m;i++){
        printf("%lld/%lld\n",a[i].a,a[i].b);
    }
    return 0;
}
